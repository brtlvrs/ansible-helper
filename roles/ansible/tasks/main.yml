---
#-- 
- name: display custom variables
  #-- debug task to display custom created variables
  tags:
  - always
  debug:
    var: "{{ item }}"
    verbosity: 1
  loop:
  - ansible

- name: "remove docker image: {{ansible.docker.image.name}}:{{ansible.docker.image.tag}}" 
  tags:
    - rm_image
    - buid
    - rm_all
  docker_image:
    name: "{{ansible.docker.image.name}}" 
    tag: "{{ansible.docker.image.tag}}" 
    state: absent

- name: check build folder
  tags:
    - never
    - build
    - archive
  file:
    path: "{{ansible.docker.image.build.path}}"
    state: directory
    mode: '0755'


- name: bugfix 'invalid selinux context' - create config.xml
  tags:
    - build
    - archive
  file:
    path:  "{{ansible.docker.image.build.path}}/{{item}}"
    state: touch
  loop:
    - dockerfile

- name: templating build content
  tags:
    - Archive
    - build
  template:
    src: "{{item}}.j2"
    dest: "{{ansible.docker.image.build.path}}/{{item}}"
  loop:
    - dockerfile

- name: "build docker image: {{ansible.fullname}}:{{ansible.tag}}" 
  tags:
    - build
    - Archive
  docker_image:
    build:
      pull: "false"
      path: "{{ansible.docker.image.build.path}}"
    source: build
    name: "{{ansible.fullname}}" 
    tag: "{{ansible.tag}}" 
    push: false

- name: "create ansible wrapper in {{ansible.wrapper.location}}"
  tags:
    - install
    - build
  template:
    src: "{{ansible.wrapper.name}}.j2"
    dest: "{{ansible.wrapper.location}}/{{ansible.wrapper.name}}"
    mode: u=rwx,g=rwx,o=r

- name: "create archiving location: {{ansible.docker.image.archive.path}}"
  tags:
    - never
    - archive 
    - archive_only
  file:
    path: "{{ansible.docker.image.archive.path}}"
    state: directory
    mode: '0755'

- name: "Archive / export dockerimage to: {{ansible.docker.image.archive.path}}/{{ansible.fullname}}-{{ansible.tag}}.tar"
  tags:
    - never
    - archive 
    - archive_only 
  docker_image:
    name: "{{ansible.fullname}}"
    source: local  
    tag: "{{ansible.tag}}"
    archive_path: "{{ansible.docker.image.archive.path}}/{{ansible.fullname}}.{{ansible.tag}}.tar"

- name: check import folder
  tags:
    - never
    - import
  file:
    path: "{{ansible.docker.image.import.location}}"
    state: directory
    mode: '0755'


- name: find docker archive files to import
  tags:
    - never
    - import
  register: import_list
  find:
    paths: ["{{ansible.docker.image.import.location}}"]
    patterns: "*.tar"

- name: import docker archives
  tags:
    - never
 #   - import
  when: import_list.matched|int > 0
  docker_image:
    load_path: "{{ item.path }}"
    source: load
    tag: "{{(item.path|basename).split('.')[1]}}brt"
    name: "{{(item.path|basename).split('.')[0]}}"
  with_items: 
    - "{{import_list.files}}"

- name: list images
  tags:
    - never
    - import
  register: result
  docker_image_info:
    debug: no
  
- name: show images
  tags:
    - never
    - import
  debug:
    var: result
  

- name: Remove build folder and its content
  tags:
    - always
  file:
    path:  "{{ansible.docker.image.build.path}}"
    state: absent

- name: help
  tags:
    - never
    - help
  debug:
    var:
      help